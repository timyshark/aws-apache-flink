/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.amazonaws.services.msf.avro;

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@org.apache.avro.specific.AvroGenerated
public class TemperatureSample extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -5691630179667961414L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"TemperatureSample\",\"namespace\":\"com.amazonaws.services.msf.avro\",\"fields\":[{\"name\":\"sensorId\",\"type\":\"int\"},{\"name\":\"room\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"temperature\",\"type\":\"float\"},{\"name\":\"sampleTime\",\"type\":{\"type\":\"long\",\"logicalType\":\"timestamp-millis\"}}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();
static {
    MODEL$.addLogicalTypeConversion(new org.apache.avro.data.TimeConversions.TimestampMillisConversion());
  }

  private static final BinaryMessageEncoder<TemperatureSample> ENCODER =
      new BinaryMessageEncoder<TemperatureSample>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<TemperatureSample> DECODER =
      new BinaryMessageDecoder<TemperatureSample>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<TemperatureSample> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<TemperatureSample> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<TemperatureSample> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<TemperatureSample>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this TemperatureSample to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a TemperatureSample from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a TemperatureSample instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static TemperatureSample fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

   private int sensorId;
   private java.lang.String room;
   private float temperature;
   private java.time.Instant sampleTime;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public TemperatureSample() {}

  /**
   * All-args constructor.
   * @param sensorId The new value for sensorId
   * @param room The new value for room
   * @param temperature The new value for temperature
   * @param sampleTime The new value for sampleTime
   */
  public TemperatureSample(java.lang.Integer sensorId, java.lang.String room, java.lang.Float temperature, java.time.Instant sampleTime) {
    this.sensorId = sensorId;
    this.room = room;
    this.temperature = temperature;
    this.sampleTime = sampleTime.truncatedTo(java.time.temporal.ChronoUnit.MILLIS);
  }

  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return sensorId;
    case 1: return room;
    case 2: return temperature;
    case 3: return sampleTime;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  private static final org.apache.avro.Conversion<?>[] conversions =
      new org.apache.avro.Conversion<?>[] {
      null,
      null,
      null,
      new org.apache.avro.data.TimeConversions.TimestampMillisConversion(),
      null
  };

  @Override
  public org.apache.avro.Conversion<?> getConversion(int field) {
    return conversions[field];
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: sensorId = (java.lang.Integer)value$; break;
    case 1: room = value$ != null ? value$.toString() : null; break;
    case 2: temperature = (java.lang.Float)value$; break;
    case 3: sampleTime = (java.time.Instant)value$; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'sensorId' field.
   * @return The value of the 'sensorId' field.
   */
  public int getSensorId() {
    return sensorId;
  }


  /**
   * Sets the value of the 'sensorId' field.
   * @param value the value to set.
   */
  public void setSensorId(int value) {
    this.sensorId = value;
  }

  /**
   * Gets the value of the 'room' field.
   * @return The value of the 'room' field.
   */
  public java.lang.String getRoom() {
    return room;
  }


  /**
   * Sets the value of the 'room' field.
   * @param value the value to set.
   */
  public void setRoom(java.lang.String value) {
    this.room = value;
  }

  /**
   * Gets the value of the 'temperature' field.
   * @return The value of the 'temperature' field.
   */
  public float getTemperature() {
    return temperature;
  }


  /**
   * Sets the value of the 'temperature' field.
   * @param value the value to set.
   */
  public void setTemperature(float value) {
    this.temperature = value;
  }

  /**
   * Gets the value of the 'sampleTime' field.
   * @return The value of the 'sampleTime' field.
   */
  public java.time.Instant getSampleTime() {
    return sampleTime;
  }


  /**
   * Sets the value of the 'sampleTime' field.
   * @param value the value to set.
   */
  public void setSampleTime(java.time.Instant value) {
    this.sampleTime = value.truncatedTo(java.time.temporal.ChronoUnit.MILLIS);
  }

  /**
   * Creates a new TemperatureSample RecordBuilder.
   * @return A new TemperatureSample RecordBuilder
   */
  public static com.amazonaws.services.msf.avro.TemperatureSample.Builder newBuilder() {
    return new com.amazonaws.services.msf.avro.TemperatureSample.Builder();
  }

  /**
   * Creates a new TemperatureSample RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new TemperatureSample RecordBuilder
   */
  public static com.amazonaws.services.msf.avro.TemperatureSample.Builder newBuilder(com.amazonaws.services.msf.avro.TemperatureSample.Builder other) {
    if (other == null) {
      return new com.amazonaws.services.msf.avro.TemperatureSample.Builder();
    } else {
      return new com.amazonaws.services.msf.avro.TemperatureSample.Builder(other);
    }
  }

  /**
   * Creates a new TemperatureSample RecordBuilder by copying an existing TemperatureSample instance.
   * @param other The existing instance to copy.
   * @return A new TemperatureSample RecordBuilder
   */
  public static com.amazonaws.services.msf.avro.TemperatureSample.Builder newBuilder(com.amazonaws.services.msf.avro.TemperatureSample other) {
    if (other == null) {
      return new com.amazonaws.services.msf.avro.TemperatureSample.Builder();
    } else {
      return new com.amazonaws.services.msf.avro.TemperatureSample.Builder(other);
    }
  }

  /**
   * RecordBuilder for TemperatureSample instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<TemperatureSample>
    implements org.apache.avro.data.RecordBuilder<TemperatureSample> {

    private int sensorId;
    private java.lang.String room;
    private float temperature;
    private java.time.Instant sampleTime;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.amazonaws.services.msf.avro.TemperatureSample.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.sensorId)) {
        this.sensorId = data().deepCopy(fields()[0].schema(), other.sensorId);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.room)) {
        this.room = data().deepCopy(fields()[1].schema(), other.room);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.temperature)) {
        this.temperature = data().deepCopy(fields()[2].schema(), other.temperature);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (isValidValue(fields()[3], other.sampleTime)) {
        this.sampleTime = data().deepCopy(fields()[3].schema(), other.sampleTime);
        fieldSetFlags()[3] = other.fieldSetFlags()[3];
      }
    }

    /**
     * Creates a Builder by copying an existing TemperatureSample instance
     * @param other The existing instance to copy.
     */
    private Builder(com.amazonaws.services.msf.avro.TemperatureSample other) {
      super(SCHEMA$);
      if (isValidValue(fields()[0], other.sensorId)) {
        this.sensorId = data().deepCopy(fields()[0].schema(), other.sensorId);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.room)) {
        this.room = data().deepCopy(fields()[1].schema(), other.room);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.temperature)) {
        this.temperature = data().deepCopy(fields()[2].schema(), other.temperature);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.sampleTime)) {
        this.sampleTime = data().deepCopy(fields()[3].schema(), other.sampleTime);
        fieldSetFlags()[3] = true;
      }
    }

    /**
      * Gets the value of the 'sensorId' field.
      * @return The value.
      */
    public int getSensorId() {
      return sensorId;
    }


    /**
      * Sets the value of the 'sensorId' field.
      * @param value The value of 'sensorId'.
      * @return This builder.
      */
    public com.amazonaws.services.msf.avro.TemperatureSample.Builder setSensorId(int value) {
      validate(fields()[0], value);
      this.sensorId = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'sensorId' field has been set.
      * @return True if the 'sensorId' field has been set, false otherwise.
      */
    public boolean hasSensorId() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'sensorId' field.
      * @return This builder.
      */
    public com.amazonaws.services.msf.avro.TemperatureSample.Builder clearSensorId() {
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'room' field.
      * @return The value.
      */
    public java.lang.String getRoom() {
      return room;
    }


    /**
      * Sets the value of the 'room' field.
      * @param value The value of 'room'.
      * @return This builder.
      */
    public com.amazonaws.services.msf.avro.TemperatureSample.Builder setRoom(java.lang.String value) {
      validate(fields()[1], value);
      this.room = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'room' field has been set.
      * @return True if the 'room' field has been set, false otherwise.
      */
    public boolean hasRoom() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'room' field.
      * @return This builder.
      */
    public com.amazonaws.services.msf.avro.TemperatureSample.Builder clearRoom() {
      room = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'temperature' field.
      * @return The value.
      */
    public float getTemperature() {
      return temperature;
    }


    /**
      * Sets the value of the 'temperature' field.
      * @param value The value of 'temperature'.
      * @return This builder.
      */
    public com.amazonaws.services.msf.avro.TemperatureSample.Builder setTemperature(float value) {
      validate(fields()[2], value);
      this.temperature = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'temperature' field has been set.
      * @return True if the 'temperature' field has been set, false otherwise.
      */
    public boolean hasTemperature() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'temperature' field.
      * @return This builder.
      */
    public com.amazonaws.services.msf.avro.TemperatureSample.Builder clearTemperature() {
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'sampleTime' field.
      * @return The value.
      */
    public java.time.Instant getSampleTime() {
      return sampleTime;
    }


    /**
      * Sets the value of the 'sampleTime' field.
      * @param value The value of 'sampleTime'.
      * @return This builder.
      */
    public com.amazonaws.services.msf.avro.TemperatureSample.Builder setSampleTime(java.time.Instant value) {
      validate(fields()[3], value);
      this.sampleTime = value.truncatedTo(java.time.temporal.ChronoUnit.MILLIS);
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'sampleTime' field has been set.
      * @return True if the 'sampleTime' field has been set, false otherwise.
      */
    public boolean hasSampleTime() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'sampleTime' field.
      * @return This builder.
      */
    public com.amazonaws.services.msf.avro.TemperatureSample.Builder clearSampleTime() {
      fieldSetFlags()[3] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public TemperatureSample build() {
      try {
        TemperatureSample record = new TemperatureSample();
        record.sensorId = fieldSetFlags()[0] ? this.sensorId : (java.lang.Integer) defaultValue(fields()[0]);
        record.room = fieldSetFlags()[1] ? this.room : (java.lang.String) defaultValue(fields()[1]);
        record.temperature = fieldSetFlags()[2] ? this.temperature : (java.lang.Float) defaultValue(fields()[2]);
        record.sampleTime = fieldSetFlags()[3] ? this.sampleTime : (java.time.Instant) defaultValue(fields()[3]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<TemperatureSample>
    WRITER$ = (org.apache.avro.io.DatumWriter<TemperatureSample>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<TemperatureSample>
    READER$ = (org.apache.avro.io.DatumReader<TemperatureSample>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}










