/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.amazonaws.services.msf.avro;

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@org.apache.avro.specific.AvroGenerated
public class RoomTemperature extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -4709383624328823145L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"RoomTemperature\",\"namespace\":\"com.amazonaws.services.msf.avro\",\"fields\":[{\"name\":\"room\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"temperature\",\"type\":\"float\"},{\"name\":\"sampleCount\",\"type\":\"int\"},{\"name\":\"lastSampleTime\",\"type\":{\"type\":\"long\",\"logicalType\":\"timestamp-millis\"}}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();
static {
    MODEL$.addLogicalTypeConversion(new org.apache.avro.data.TimeConversions.TimestampMillisConversion());
  }

  private static final BinaryMessageEncoder<RoomTemperature> ENCODER =
      new BinaryMessageEncoder<RoomTemperature>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<RoomTemperature> DECODER =
      new BinaryMessageDecoder<RoomTemperature>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<RoomTemperature> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<RoomTemperature> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<RoomTemperature> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<RoomTemperature>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this RoomTemperature to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a RoomTemperature from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a RoomTemperature instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static RoomTemperature fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

   private java.lang.String room;
   private float temperature;
   private int sampleCount;
   private java.time.Instant lastSampleTime;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public RoomTemperature() {}

  /**
   * All-args constructor.
   * @param room The new value for room
   * @param temperature The new value for temperature
   * @param sampleCount The new value for sampleCount
   * @param lastSampleTime The new value for lastSampleTime
   */
  public RoomTemperature(java.lang.String room, java.lang.Float temperature, java.lang.Integer sampleCount, java.time.Instant lastSampleTime) {
    this.room = room;
    this.temperature = temperature;
    this.sampleCount = sampleCount;
    this.lastSampleTime = lastSampleTime.truncatedTo(java.time.temporal.ChronoUnit.MILLIS);
  }

  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return room;
    case 1: return temperature;
    case 2: return sampleCount;
    case 3: return lastSampleTime;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  private static final org.apache.avro.Conversion<?>[] conversions =
      new org.apache.avro.Conversion<?>[] {
      null,
      null,
      null,
      new org.apache.avro.data.TimeConversions.TimestampMillisConversion(),
      null
  };

  @Override
  public org.apache.avro.Conversion<?> getConversion(int field) {
    return conversions[field];
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: room = value$ != null ? value$.toString() : null; break;
    case 1: temperature = (java.lang.Float)value$; break;
    case 2: sampleCount = (java.lang.Integer)value$; break;
    case 3: lastSampleTime = (java.time.Instant)value$; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'room' field.
   * @return The value of the 'room' field.
   */
  public java.lang.String getRoom() {
    return room;
  }


  /**
   * Sets the value of the 'room' field.
   * @param value the value to set.
   */
  public void setRoom(java.lang.String value) {
    this.room = value;
  }

  /**
   * Gets the value of the 'temperature' field.
   * @return The value of the 'temperature' field.
   */
  public float getTemperature() {
    return temperature;
  }


  /**
   * Sets the value of the 'temperature' field.
   * @param value the value to set.
   */
  public void setTemperature(float value) {
    this.temperature = value;
  }

  /**
   * Gets the value of the 'sampleCount' field.
   * @return The value of the 'sampleCount' field.
   */
  public int getSampleCount() {
    return sampleCount;
  }


  /**
   * Sets the value of the 'sampleCount' field.
   * @param value the value to set.
   */
  public void setSampleCount(int value) {
    this.sampleCount = value;
  }

  /**
   * Gets the value of the 'lastSampleTime' field.
   * @return The value of the 'lastSampleTime' field.
   */
  public java.time.Instant getLastSampleTime() {
    return lastSampleTime;
  }


  /**
   * Sets the value of the 'lastSampleTime' field.
   * @param value the value to set.
   */
  public void setLastSampleTime(java.time.Instant value) {
    this.lastSampleTime = value.truncatedTo(java.time.temporal.ChronoUnit.MILLIS);
  }

  /**
   * Creates a new RoomTemperature RecordBuilder.
   * @return A new RoomTemperature RecordBuilder
   */
  public static com.amazonaws.services.msf.avro.RoomTemperature.Builder newBuilder() {
    return new com.amazonaws.services.msf.avro.RoomTemperature.Builder();
  }

  /**
   * Creates a new RoomTemperature RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new RoomTemperature RecordBuilder
   */
  public static com.amazonaws.services.msf.avro.RoomTemperature.Builder newBuilder(com.amazonaws.services.msf.avro.RoomTemperature.Builder other) {
    if (other == null) {
      return new com.amazonaws.services.msf.avro.RoomTemperature.Builder();
    } else {
      return new com.amazonaws.services.msf.avro.RoomTemperature.Builder(other);
    }
  }

  /**
   * Creates a new RoomTemperature RecordBuilder by copying an existing RoomTemperature instance.
   * @param other The existing instance to copy.
   * @return A new RoomTemperature RecordBuilder
   */
  public static com.amazonaws.services.msf.avro.RoomTemperature.Builder newBuilder(com.amazonaws.services.msf.avro.RoomTemperature other) {
    if (other == null) {
      return new com.amazonaws.services.msf.avro.RoomTemperature.Builder();
    } else {
      return new com.amazonaws.services.msf.avro.RoomTemperature.Builder(other);
    }
  }

  /**
   * RecordBuilder for RoomTemperature instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<RoomTemperature>
    implements org.apache.avro.data.RecordBuilder<RoomTemperature> {

    private java.lang.String room;
    private float temperature;
    private int sampleCount;
    private java.time.Instant lastSampleTime;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.amazonaws.services.msf.avro.RoomTemperature.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.room)) {
        this.room = data().deepCopy(fields()[0].schema(), other.room);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.temperature)) {
        this.temperature = data().deepCopy(fields()[1].schema(), other.temperature);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.sampleCount)) {
        this.sampleCount = data().deepCopy(fields()[2].schema(), other.sampleCount);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (isValidValue(fields()[3], other.lastSampleTime)) {
        this.lastSampleTime = data().deepCopy(fields()[3].schema(), other.lastSampleTime);
        fieldSetFlags()[3] = other.fieldSetFlags()[3];
      }
    }

    /**
     * Creates a Builder by copying an existing RoomTemperature instance
     * @param other The existing instance to copy.
     */
    private Builder(com.amazonaws.services.msf.avro.RoomTemperature other) {
      super(SCHEMA$);
      if (isValidValue(fields()[0], other.room)) {
        this.room = data().deepCopy(fields()[0].schema(), other.room);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.temperature)) {
        this.temperature = data().deepCopy(fields()[1].schema(), other.temperature);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.sampleCount)) {
        this.sampleCount = data().deepCopy(fields()[2].schema(), other.sampleCount);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.lastSampleTime)) {
        this.lastSampleTime = data().deepCopy(fields()[3].schema(), other.lastSampleTime);
        fieldSetFlags()[3] = true;
      }
    }

    /**
      * Gets the value of the 'room' field.
      * @return The value.
      */
    public java.lang.String getRoom() {
      return room;
    }


    /**
      * Sets the value of the 'room' field.
      * @param value The value of 'room'.
      * @return This builder.
      */
    public com.amazonaws.services.msf.avro.RoomTemperature.Builder setRoom(java.lang.String value) {
      validate(fields()[0], value);
      this.room = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'room' field has been set.
      * @return True if the 'room' field has been set, false otherwise.
      */
    public boolean hasRoom() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'room' field.
      * @return This builder.
      */
    public com.amazonaws.services.msf.avro.RoomTemperature.Builder clearRoom() {
      room = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'temperature' field.
      * @return The value.
      */
    public float getTemperature() {
      return temperature;
    }


    /**
      * Sets the value of the 'temperature' field.
      * @param value The value of 'temperature'.
      * @return This builder.
      */
    public com.amazonaws.services.msf.avro.RoomTemperature.Builder setTemperature(float value) {
      validate(fields()[1], value);
      this.temperature = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'temperature' field has been set.
      * @return True if the 'temperature' field has been set, false otherwise.
      */
    public boolean hasTemperature() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'temperature' field.
      * @return This builder.
      */
    public com.amazonaws.services.msf.avro.RoomTemperature.Builder clearTemperature() {
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'sampleCount' field.
      * @return The value.
      */
    public int getSampleCount() {
      return sampleCount;
    }


    /**
      * Sets the value of the 'sampleCount' field.
      * @param value The value of 'sampleCount'.
      * @return This builder.
      */
    public com.amazonaws.services.msf.avro.RoomTemperature.Builder setSampleCount(int value) {
      validate(fields()[2], value);
      this.sampleCount = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'sampleCount' field has been set.
      * @return True if the 'sampleCount' field has been set, false otherwise.
      */
    public boolean hasSampleCount() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'sampleCount' field.
      * @return This builder.
      */
    public com.amazonaws.services.msf.avro.RoomTemperature.Builder clearSampleCount() {
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'lastSampleTime' field.
      * @return The value.
      */
    public java.time.Instant getLastSampleTime() {
      return lastSampleTime;
    }


    /**
      * Sets the value of the 'lastSampleTime' field.
      * @param value The value of 'lastSampleTime'.
      * @return This builder.
      */
    public com.amazonaws.services.msf.avro.RoomTemperature.Builder setLastSampleTime(java.time.Instant value) {
      validate(fields()[3], value);
      this.lastSampleTime = value.truncatedTo(java.time.temporal.ChronoUnit.MILLIS);
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'lastSampleTime' field has been set.
      * @return True if the 'lastSampleTime' field has been set, false otherwise.
      */
    public boolean hasLastSampleTime() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'lastSampleTime' field.
      * @return This builder.
      */
    public com.amazonaws.services.msf.avro.RoomTemperature.Builder clearLastSampleTime() {
      fieldSetFlags()[3] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public RoomTemperature build() {
      try {
        RoomTemperature record = new RoomTemperature();
        record.room = fieldSetFlags()[0] ? this.room : (java.lang.String) defaultValue(fields()[0]);
        record.temperature = fieldSetFlags()[1] ? this.temperature : (java.lang.Float) defaultValue(fields()[1]);
        record.sampleCount = fieldSetFlags()[2] ? this.sampleCount : (java.lang.Integer) defaultValue(fields()[2]);
        record.lastSampleTime = fieldSetFlags()[3] ? this.lastSampleTime : (java.time.Instant) defaultValue(fields()[3]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<RoomTemperature>
    WRITER$ = (org.apache.avro.io.DatumWriter<RoomTemperature>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<RoomTemperature>
    READER$ = (org.apache.avro.io.DatumReader<RoomTemperature>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}










