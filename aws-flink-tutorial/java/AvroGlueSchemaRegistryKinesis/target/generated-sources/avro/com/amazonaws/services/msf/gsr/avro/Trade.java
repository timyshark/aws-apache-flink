/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.amazonaws.services.msf.gsr.avro;

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@org.apache.avro.specific.AvroGenerated
public class Trade extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 8465628812160883553L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"Trade\",\"namespace\":\"com.amazonaws.services.msf.gsr.avro\",\"fields\":[{\"name\":\"tradeId\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"accountNr\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"executionTime\",\"type\":{\"type\":\"long\",\"logicalType\":\"timestamp-millis\"}},{\"name\":\"buySell\",\"type\":{\"type\":\"enum\",\"name\":\"BuySell\",\"symbols\":[\"BUY\",\"SELL\"]}},{\"name\":\"symbol\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"price\",\"type\":{\"type\":\"bytes\",\"logicalType\":\"decimal\",\"precision\":8,\"scale\":2}},{\"name\":\"shares\",\"type\":\"int\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();
static {
    MODEL$.addLogicalTypeConversion(new org.apache.avro.data.TimeConversions.TimestampMillisConversion());
    MODEL$.addLogicalTypeConversion(new org.apache.avro.Conversions.DecimalConversion());
  }

  private static final BinaryMessageEncoder<Trade> ENCODER =
      new BinaryMessageEncoder<Trade>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<Trade> DECODER =
      new BinaryMessageDecoder<Trade>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<Trade> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<Trade> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<Trade> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<Trade>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this Trade to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a Trade from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a Trade instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static Trade fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

   private java.lang.String tradeId;
   private java.lang.String accountNr;
   private java.time.Instant executionTime;
   private com.amazonaws.services.msf.gsr.avro.BuySell buySell;
   private java.lang.String symbol;
   private java.math.BigDecimal price;
   private int shares;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public Trade() {}

  /**
   * All-args constructor.
   * @param tradeId The new value for tradeId
   * @param accountNr The new value for accountNr
   * @param executionTime The new value for executionTime
   * @param buySell The new value for buySell
   * @param symbol The new value for symbol
   * @param price The new value for price
   * @param shares The new value for shares
   */
  public Trade(java.lang.String tradeId, java.lang.String accountNr, java.time.Instant executionTime, com.amazonaws.services.msf.gsr.avro.BuySell buySell, java.lang.String symbol, java.math.BigDecimal price, java.lang.Integer shares) {
    this.tradeId = tradeId;
    this.accountNr = accountNr;
    this.executionTime = executionTime.truncatedTo(java.time.temporal.ChronoUnit.MILLIS);
    this.buySell = buySell;
    this.symbol = symbol;
    this.price = price;
    this.shares = shares;
  }

  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return tradeId;
    case 1: return accountNr;
    case 2: return executionTime;
    case 3: return buySell;
    case 4: return symbol;
    case 5: return price;
    case 6: return shares;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  private static final org.apache.avro.Conversion<?>[] conversions =
      new org.apache.avro.Conversion<?>[] {
      null,
      null,
      new org.apache.avro.data.TimeConversions.TimestampMillisConversion(),
      null,
      null,
      new org.apache.avro.Conversions.DecimalConversion(),
      null,
      null
  };

  @Override
  public org.apache.avro.Conversion<?> getConversion(int field) {
    return conversions[field];
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: tradeId = value$ != null ? value$.toString() : null; break;
    case 1: accountNr = value$ != null ? value$.toString() : null; break;
    case 2: executionTime = (java.time.Instant)value$; break;
    case 3: buySell = (com.amazonaws.services.msf.gsr.avro.BuySell)value$; break;
    case 4: symbol = value$ != null ? value$.toString() : null; break;
    case 5: price = (java.math.BigDecimal)value$; break;
    case 6: shares = (java.lang.Integer)value$; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'tradeId' field.
   * @return The value of the 'tradeId' field.
   */
  public java.lang.String getTradeId() {
    return tradeId;
  }


  /**
   * Sets the value of the 'tradeId' field.
   * @param value the value to set.
   */
  public void setTradeId(java.lang.String value) {
    this.tradeId = value;
  }

  /**
   * Gets the value of the 'accountNr' field.
   * @return The value of the 'accountNr' field.
   */
  public java.lang.String getAccountNr() {
    return accountNr;
  }


  /**
   * Sets the value of the 'accountNr' field.
   * @param value the value to set.
   */
  public void setAccountNr(java.lang.String value) {
    this.accountNr = value;
  }

  /**
   * Gets the value of the 'executionTime' field.
   * @return The value of the 'executionTime' field.
   */
  public java.time.Instant getExecutionTime() {
    return executionTime;
  }


  /**
   * Sets the value of the 'executionTime' field.
   * @param value the value to set.
   */
  public void setExecutionTime(java.time.Instant value) {
    this.executionTime = value.truncatedTo(java.time.temporal.ChronoUnit.MILLIS);
  }

  /**
   * Gets the value of the 'buySell' field.
   * @return The value of the 'buySell' field.
   */
  public com.amazonaws.services.msf.gsr.avro.BuySell getBuySell() {
    return buySell;
  }


  /**
   * Sets the value of the 'buySell' field.
   * @param value the value to set.
   */
  public void setBuySell(com.amazonaws.services.msf.gsr.avro.BuySell value) {
    this.buySell = value;
  }

  /**
   * Gets the value of the 'symbol' field.
   * @return The value of the 'symbol' field.
   */
  public java.lang.String getSymbol() {
    return symbol;
  }


  /**
   * Sets the value of the 'symbol' field.
   * @param value the value to set.
   */
  public void setSymbol(java.lang.String value) {
    this.symbol = value;
  }

  /**
   * Gets the value of the 'price' field.
   * @return The value of the 'price' field.
   */
  public java.math.BigDecimal getPrice() {
    return price;
  }


  /**
   * Sets the value of the 'price' field.
   * @param value the value to set.
   */
  public void setPrice(java.math.BigDecimal value) {
    this.price = value;
  }

  /**
   * Gets the value of the 'shares' field.
   * @return The value of the 'shares' field.
   */
  public int getShares() {
    return shares;
  }


  /**
   * Sets the value of the 'shares' field.
   * @param value the value to set.
   */
  public void setShares(int value) {
    this.shares = value;
  }

  /**
   * Creates a new Trade RecordBuilder.
   * @return A new Trade RecordBuilder
   */
  public static com.amazonaws.services.msf.gsr.avro.Trade.Builder newBuilder() {
    return new com.amazonaws.services.msf.gsr.avro.Trade.Builder();
  }

  /**
   * Creates a new Trade RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new Trade RecordBuilder
   */
  public static com.amazonaws.services.msf.gsr.avro.Trade.Builder newBuilder(com.amazonaws.services.msf.gsr.avro.Trade.Builder other) {
    if (other == null) {
      return new com.amazonaws.services.msf.gsr.avro.Trade.Builder();
    } else {
      return new com.amazonaws.services.msf.gsr.avro.Trade.Builder(other);
    }
  }

  /**
   * Creates a new Trade RecordBuilder by copying an existing Trade instance.
   * @param other The existing instance to copy.
   * @return A new Trade RecordBuilder
   */
  public static com.amazonaws.services.msf.gsr.avro.Trade.Builder newBuilder(com.amazonaws.services.msf.gsr.avro.Trade other) {
    if (other == null) {
      return new com.amazonaws.services.msf.gsr.avro.Trade.Builder();
    } else {
      return new com.amazonaws.services.msf.gsr.avro.Trade.Builder(other);
    }
  }

  /**
   * RecordBuilder for Trade instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<Trade>
    implements org.apache.avro.data.RecordBuilder<Trade> {

    private java.lang.String tradeId;
    private java.lang.String accountNr;
    private java.time.Instant executionTime;
    private com.amazonaws.services.msf.gsr.avro.BuySell buySell;
    private java.lang.String symbol;
    private java.math.BigDecimal price;
    private int shares;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.amazonaws.services.msf.gsr.avro.Trade.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.tradeId)) {
        this.tradeId = data().deepCopy(fields()[0].schema(), other.tradeId);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.accountNr)) {
        this.accountNr = data().deepCopy(fields()[1].schema(), other.accountNr);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.executionTime)) {
        this.executionTime = data().deepCopy(fields()[2].schema(), other.executionTime);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (isValidValue(fields()[3], other.buySell)) {
        this.buySell = data().deepCopy(fields()[3].schema(), other.buySell);
        fieldSetFlags()[3] = other.fieldSetFlags()[3];
      }
      if (isValidValue(fields()[4], other.symbol)) {
        this.symbol = data().deepCopy(fields()[4].schema(), other.symbol);
        fieldSetFlags()[4] = other.fieldSetFlags()[4];
      }
      if (isValidValue(fields()[5], other.price)) {
        this.price = data().deepCopy(fields()[5].schema(), other.price);
        fieldSetFlags()[5] = other.fieldSetFlags()[5];
      }
      if (isValidValue(fields()[6], other.shares)) {
        this.shares = data().deepCopy(fields()[6].schema(), other.shares);
        fieldSetFlags()[6] = other.fieldSetFlags()[6];
      }
    }

    /**
     * Creates a Builder by copying an existing Trade instance
     * @param other The existing instance to copy.
     */
    private Builder(com.amazonaws.services.msf.gsr.avro.Trade other) {
      super(SCHEMA$);
      if (isValidValue(fields()[0], other.tradeId)) {
        this.tradeId = data().deepCopy(fields()[0].schema(), other.tradeId);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.accountNr)) {
        this.accountNr = data().deepCopy(fields()[1].schema(), other.accountNr);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.executionTime)) {
        this.executionTime = data().deepCopy(fields()[2].schema(), other.executionTime);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.buySell)) {
        this.buySell = data().deepCopy(fields()[3].schema(), other.buySell);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.symbol)) {
        this.symbol = data().deepCopy(fields()[4].schema(), other.symbol);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.price)) {
        this.price = data().deepCopy(fields()[5].schema(), other.price);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.shares)) {
        this.shares = data().deepCopy(fields()[6].schema(), other.shares);
        fieldSetFlags()[6] = true;
      }
    }

    /**
      * Gets the value of the 'tradeId' field.
      * @return The value.
      */
    public java.lang.String getTradeId() {
      return tradeId;
    }


    /**
      * Sets the value of the 'tradeId' field.
      * @param value The value of 'tradeId'.
      * @return This builder.
      */
    public com.amazonaws.services.msf.gsr.avro.Trade.Builder setTradeId(java.lang.String value) {
      validate(fields()[0], value);
      this.tradeId = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'tradeId' field has been set.
      * @return True if the 'tradeId' field has been set, false otherwise.
      */
    public boolean hasTradeId() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'tradeId' field.
      * @return This builder.
      */
    public com.amazonaws.services.msf.gsr.avro.Trade.Builder clearTradeId() {
      tradeId = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'accountNr' field.
      * @return The value.
      */
    public java.lang.String getAccountNr() {
      return accountNr;
    }


    /**
      * Sets the value of the 'accountNr' field.
      * @param value The value of 'accountNr'.
      * @return This builder.
      */
    public com.amazonaws.services.msf.gsr.avro.Trade.Builder setAccountNr(java.lang.String value) {
      validate(fields()[1], value);
      this.accountNr = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'accountNr' field has been set.
      * @return True if the 'accountNr' field has been set, false otherwise.
      */
    public boolean hasAccountNr() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'accountNr' field.
      * @return This builder.
      */
    public com.amazonaws.services.msf.gsr.avro.Trade.Builder clearAccountNr() {
      accountNr = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'executionTime' field.
      * @return The value.
      */
    public java.time.Instant getExecutionTime() {
      return executionTime;
    }


    /**
      * Sets the value of the 'executionTime' field.
      * @param value The value of 'executionTime'.
      * @return This builder.
      */
    public com.amazonaws.services.msf.gsr.avro.Trade.Builder setExecutionTime(java.time.Instant value) {
      validate(fields()[2], value);
      this.executionTime = value.truncatedTo(java.time.temporal.ChronoUnit.MILLIS);
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'executionTime' field has been set.
      * @return True if the 'executionTime' field has been set, false otherwise.
      */
    public boolean hasExecutionTime() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'executionTime' field.
      * @return This builder.
      */
    public com.amazonaws.services.msf.gsr.avro.Trade.Builder clearExecutionTime() {
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'buySell' field.
      * @return The value.
      */
    public com.amazonaws.services.msf.gsr.avro.BuySell getBuySell() {
      return buySell;
    }


    /**
      * Sets the value of the 'buySell' field.
      * @param value The value of 'buySell'.
      * @return This builder.
      */
    public com.amazonaws.services.msf.gsr.avro.Trade.Builder setBuySell(com.amazonaws.services.msf.gsr.avro.BuySell value) {
      validate(fields()[3], value);
      this.buySell = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'buySell' field has been set.
      * @return True if the 'buySell' field has been set, false otherwise.
      */
    public boolean hasBuySell() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'buySell' field.
      * @return This builder.
      */
    public com.amazonaws.services.msf.gsr.avro.Trade.Builder clearBuySell() {
      buySell = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'symbol' field.
      * @return The value.
      */
    public java.lang.String getSymbol() {
      return symbol;
    }


    /**
      * Sets the value of the 'symbol' field.
      * @param value The value of 'symbol'.
      * @return This builder.
      */
    public com.amazonaws.services.msf.gsr.avro.Trade.Builder setSymbol(java.lang.String value) {
      validate(fields()[4], value);
      this.symbol = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'symbol' field has been set.
      * @return True if the 'symbol' field has been set, false otherwise.
      */
    public boolean hasSymbol() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'symbol' field.
      * @return This builder.
      */
    public com.amazonaws.services.msf.gsr.avro.Trade.Builder clearSymbol() {
      symbol = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'price' field.
      * @return The value.
      */
    public java.math.BigDecimal getPrice() {
      return price;
    }


    /**
      * Sets the value of the 'price' field.
      * @param value The value of 'price'.
      * @return This builder.
      */
    public com.amazonaws.services.msf.gsr.avro.Trade.Builder setPrice(java.math.BigDecimal value) {
      validate(fields()[5], value);
      this.price = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'price' field has been set.
      * @return True if the 'price' field has been set, false otherwise.
      */
    public boolean hasPrice() {
      return fieldSetFlags()[5];
    }


    /**
      * Clears the value of the 'price' field.
      * @return This builder.
      */
    public com.amazonaws.services.msf.gsr.avro.Trade.Builder clearPrice() {
      price = null;
      fieldSetFlags()[5] = false;
      return this;
    }

    /**
      * Gets the value of the 'shares' field.
      * @return The value.
      */
    public int getShares() {
      return shares;
    }


    /**
      * Sets the value of the 'shares' field.
      * @param value The value of 'shares'.
      * @return This builder.
      */
    public com.amazonaws.services.msf.gsr.avro.Trade.Builder setShares(int value) {
      validate(fields()[6], value);
      this.shares = value;
      fieldSetFlags()[6] = true;
      return this;
    }

    /**
      * Checks whether the 'shares' field has been set.
      * @return True if the 'shares' field has been set, false otherwise.
      */
    public boolean hasShares() {
      return fieldSetFlags()[6];
    }


    /**
      * Clears the value of the 'shares' field.
      * @return This builder.
      */
    public com.amazonaws.services.msf.gsr.avro.Trade.Builder clearShares() {
      fieldSetFlags()[6] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public Trade build() {
      try {
        Trade record = new Trade();
        record.tradeId = fieldSetFlags()[0] ? this.tradeId : (java.lang.String) defaultValue(fields()[0]);
        record.accountNr = fieldSetFlags()[1] ? this.accountNr : (java.lang.String) defaultValue(fields()[1]);
        record.executionTime = fieldSetFlags()[2] ? this.executionTime : (java.time.Instant) defaultValue(fields()[2]);
        record.buySell = fieldSetFlags()[3] ? this.buySell : (com.amazonaws.services.msf.gsr.avro.BuySell) defaultValue(fields()[3]);
        record.symbol = fieldSetFlags()[4] ? this.symbol : (java.lang.String) defaultValue(fields()[4]);
        record.price = fieldSetFlags()[5] ? this.price : (java.math.BigDecimal) defaultValue(fields()[5]);
        record.shares = fieldSetFlags()[6] ? this.shares : (java.lang.Integer) defaultValue(fields()[6]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<Trade>
    WRITER$ = (org.apache.avro.io.DatumWriter<Trade>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<Trade>
    READER$ = (org.apache.avro.io.DatumReader<Trade>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}










